
sp:     file format elf32-i386

Disassembly of section .init:

080482c0 <_init>:
 80482c0:	55                   	push   %ebp
 80482c1:	89 e5                	mov    %esp,%ebp
 80482c3:	53                   	push   %ebx
 80482c4:	83 ec 04             	sub    $0x4,%esp
 80482c7:	e8 00 00 00 00       	call   80482cc <_init+0xc>
 80482cc:	5b                   	pop    %ebx
 80482cd:	81 c3 34 13 00 00    	add    $0x1334,%ebx
 80482d3:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
 80482d9:	85 d2                	test   %edx,%edx
 80482db:	74 05                	je     80482e2 <_init+0x22>
 80482dd:	e8 1e 00 00 00       	call   8048300 <__gmon_start__@plt>
 80482e2:	e8 b9 00 00 00       	call   80483a0 <frame_dummy>
 80482e7:	e8 c4 01 00 00       	call   80484b0 <__do_global_ctors_aux>
 80482ec:	58                   	pop    %eax
 80482ed:	5b                   	pop    %ebx
 80482ee:	c9                   	leave  
 80482ef:	c3                   	ret    
Disassembly of section .plt:

080482f0 <__gmon_start__@plt-0x10>:
 80482f0:	ff 35 04 96 04 08    	pushl  0x8049604
 80482f6:	ff 25 08 96 04 08    	jmp    *0x8049608
 80482fc:	00 00                	add    %al,(%eax)
	...

08048300 <__gmon_start__@plt>:
 8048300:	ff 25 0c 96 04 08    	jmp    *0x804960c
 8048306:	68 00 00 00 00       	push   $0x0
 804830b:	e9 e0 ff ff ff       	jmp    80482f0 <_init+0x30>

08048310 <__libc_start_main@plt>:
 8048310:	ff 25 10 96 04 08    	jmp    *0x8049610
 8048316:	68 08 00 00 00       	push   $0x8
 804831b:	e9 d0 ff ff ff       	jmp    80482f0 <_init+0x30>

08048320 <printf@plt>:
 8048320:	ff 25 14 96 04 08    	jmp    *0x8049614
 8048326:	68 10 00 00 00       	push   $0x10
 804832b:	e9 c0 ff ff ff       	jmp    80482f0 <_init+0x30>

08048330 <__stack_chk_fail@plt>:
 8048330:	ff 25 18 96 04 08    	jmp    *0x8049618
 8048336:	68 18 00 00 00       	push   $0x18
 804833b:	e9 b0 ff ff ff       	jmp    80482f0 <_init+0x30>
Disassembly of section .text:

08048340 <_start>:
 8048340:	31 ed                	xor    %ebp,%ebp
 8048342:	5e                   	pop    %esi
 8048343:	89 e1                	mov    %esp,%ecx
 8048345:	83 e4 f0             	and    $0xfffffff0,%esp
 8048348:	50                   	push   %eax
 8048349:	54                   	push   %esp
 804834a:	52                   	push   %edx
 804834b:	68 40 84 04 08       	push   $0x8048440
 8048350:	68 50 84 04 08       	push   $0x8048450
 8048355:	51                   	push   %ecx
 8048356:	56                   	push   %esi
 8048357:	68 e5 83 04 08       	push   $0x80483e5
 804835c:	e8 af ff ff ff       	call   8048310 <__libc_start_main@plt>
 8048361:	f4                   	hlt    
 8048362:	90                   	nop    
 8048363:	90                   	nop    
 8048364:	90                   	nop    
 8048365:	90                   	nop    
 8048366:	90                   	nop    
 8048367:	90                   	nop    
 8048368:	90                   	nop    
 8048369:	90                   	nop    
 804836a:	90                   	nop    
 804836b:	90                   	nop    
 804836c:	90                   	nop    
 804836d:	90                   	nop    
 804836e:	90                   	nop    
 804836f:	90                   	nop    

08048370 <__do_global_dtors_aux>:
 8048370:	55                   	push   %ebp
 8048371:	89 e5                	mov    %esp,%ebp
 8048373:	83 ec 08             	sub    $0x8,%esp
 8048376:	80 3d 28 96 04 08 00 	cmpb   $0x0,0x8049628
 804837d:	74 0c                	je     804838b <__do_global_dtors_aux+0x1b>
 804837f:	eb 1c                	jmp    804839d <__do_global_dtors_aux+0x2d>
 8048381:	83 c0 04             	add    $0x4,%eax
 8048384:	a3 24 96 04 08       	mov    %eax,0x8049624
 8048389:	ff d2                	call   *%edx
 804838b:	a1 24 96 04 08       	mov    0x8049624,%eax
 8048390:	8b 10                	mov    (%eax),%edx
 8048392:	85 d2                	test   %edx,%edx
 8048394:	75 eb                	jne    8048381 <__do_global_dtors_aux+0x11>
 8048396:	c6 05 28 96 04 08 01 	movb   $0x1,0x8049628
 804839d:	c9                   	leave  
 804839e:	c3                   	ret    
 804839f:	90                   	nop    

080483a0 <frame_dummy>:
 80483a0:	55                   	push   %ebp
 80483a1:	89 e5                	mov    %esp,%ebp
 80483a3:	83 ec 08             	sub    $0x8,%esp
 80483a6:	a1 28 95 04 08       	mov    0x8049528,%eax
 80483ab:	85 c0                	test   %eax,%eax
 80483ad:	74 12                	je     80483c1 <frame_dummy+0x21>
 80483af:	b8 00 00 00 00       	mov    $0x0,%eax
 80483b4:	85 c0                	test   %eax,%eax
 80483b6:	74 09                	je     80483c1 <frame_dummy+0x21>
 80483b8:	c7 04 24 28 95 04 08 	movl   $0x8049528,(%esp)
 80483bf:	ff d0                	call   *%eax
 80483c1:	c9                   	leave  
 80483c2:	c3                   	ret    
 80483c3:	90                   	nop    

080483c4 <fun1>:
#include <stdio.h>
int fun1(char str[1024])
{
 80483c4:	55                   	push   %ebp
 80483c5:	89 e5                	mov    %esp,%ebp
 80483c7:	83 ec 08             	sub    $0x8,%esp
	printf("sizeof(str) = %d\n", sizeof(str));
 80483ca:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
 80483d1:	00 
 80483d2:	c7 04 24 00 85 04 08 	movl   $0x8048500,(%esp)
 80483d9:	e8 42 ff ff ff       	call   8048320 <printf@plt>
	return 0;
 80483de:	b8 00 00 00 00       	mov    $0x0,%eax
}
 80483e3:	c9                   	leave  
 80483e4:	c3                   	ret    

080483e5 <main>:

int main()
{
 80483e5:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 80483e9:	83 e4 f0             	and    $0xfffffff0,%esp
 80483ec:	ff 71 fc             	pushl  -0x4(%ecx)
 80483ef:	55                   	push   %ebp
 80483f0:	89 e5                	mov    %esp,%ebp
 80483f2:	51                   	push   %ecx
 80483f3:	81 ec 14 04 00 00    	sub    $0x414,%esp
 80483f9:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80483ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
 8048402:	31 c0                	xor    %eax,%eax
	char a[1024];
	fun1(a);
 8048404:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
 804840a:	89 04 24             	mov    %eax,(%esp)
 804840d:	e8 b2 ff ff ff       	call   80483c4 <fun1>
	return 0;
 8048412:	b8 00 00 00 00       	mov    $0x0,%eax
	
	}
 8048417:	8b 55 f8             	mov    -0x8(%ebp),%edx
 804841a:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 8048421:	74 05                	je     8048428 <main+0x43>
 8048423:	e8 08 ff ff ff       	call   8048330 <__stack_chk_fail@plt>
 8048428:	81 c4 14 04 00 00    	add    $0x414,%esp
 804842e:	59                   	pop    %ecx
 804842f:	5d                   	pop    %ebp
 8048430:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048433:	c3                   	ret    
 8048434:	90                   	nop    
 8048435:	90                   	nop    
 8048436:	90                   	nop    
 8048437:	90                   	nop    
 8048438:	90                   	nop    
 8048439:	90                   	nop    
 804843a:	90                   	nop    
 804843b:	90                   	nop    
 804843c:	90                   	nop    
 804843d:	90                   	nop    
 804843e:	90                   	nop    
 804843f:	90                   	nop    

08048440 <__libc_csu_fini>:
 8048440:	55                   	push   %ebp
 8048441:	89 e5                	mov    %esp,%ebp
 8048443:	5d                   	pop    %ebp
 8048444:	c3                   	ret    
 8048445:	8d 74 26 00          	lea    0x0(%esi),%esi
 8048449:	8d bc 27 00 00 00 00 	lea    0x0(%edi),%edi

08048450 <__libc_csu_init>:
 8048450:	55                   	push   %ebp
 8048451:	89 e5                	mov    %esp,%ebp
 8048453:	57                   	push   %edi
 8048454:	56                   	push   %esi
 8048455:	53                   	push   %ebx
 8048456:	e8 4f 00 00 00       	call   80484aa <__i686.get_pc_thunk.bx>
 804845b:	81 c3 a5 11 00 00    	add    $0x11a5,%ebx
 8048461:	83 ec 0c             	sub    $0xc,%esp
 8048464:	e8 57 fe ff ff       	call   80482c0 <_init>
 8048469:	8d bb 18 ff ff ff    	lea    -0xe8(%ebx),%edi
 804846f:	8d 83 18 ff ff ff    	lea    -0xe8(%ebx),%eax
 8048475:	29 c7                	sub    %eax,%edi
 8048477:	c1 ff 02             	sar    $0x2,%edi
 804847a:	85 ff                	test   %edi,%edi
 804847c:	74 24                	je     80484a2 <__libc_csu_init+0x52>
 804847e:	31 f6                	xor    %esi,%esi
 8048480:	8b 45 10             	mov    0x10(%ebp),%eax
 8048483:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048487:	8b 45 0c             	mov    0xc(%ebp),%eax
 804848a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804848e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048491:	89 04 24             	mov    %eax,(%esp)
 8048494:	ff 94 b3 18 ff ff ff 	call   *-0xe8(%ebx,%esi,4)
 804849b:	83 c6 01             	add    $0x1,%esi
 804849e:	39 f7                	cmp    %esi,%edi
 80484a0:	75 de                	jne    8048480 <__libc_csu_init+0x30>
 80484a2:	83 c4 0c             	add    $0xc,%esp
 80484a5:	5b                   	pop    %ebx
 80484a6:	5e                   	pop    %esi
 80484a7:	5f                   	pop    %edi
 80484a8:	5d                   	pop    %ebp
 80484a9:	c3                   	ret    

080484aa <__i686.get_pc_thunk.bx>:
 80484aa:	8b 1c 24             	mov    (%esp),%ebx
 80484ad:	c3                   	ret    
 80484ae:	90                   	nop    
 80484af:	90                   	nop    

080484b0 <__do_global_ctors_aux>:
 80484b0:	55                   	push   %ebp
 80484b1:	89 e5                	mov    %esp,%ebp
 80484b3:	53                   	push   %ebx
 80484b4:	83 ec 04             	sub    $0x4,%esp
 80484b7:	a1 18 95 04 08       	mov    0x8049518,%eax
 80484bc:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484bf:	74 12                	je     80484d3 <__do_global_ctors_aux+0x23>
 80484c1:	31 db                	xor    %ebx,%ebx
 80484c3:	ff d0                	call   *%eax
 80484c5:	8b 83 14 95 04 08    	mov    0x8049514(%ebx),%eax
 80484cb:	83 eb 04             	sub    $0x4,%ebx
 80484ce:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484d1:	75 f0                	jne    80484c3 <__do_global_ctors_aux+0x13>
 80484d3:	83 c4 04             	add    $0x4,%esp
 80484d6:	5b                   	pop    %ebx
 80484d7:	5d                   	pop    %ebp
 80484d8:	c3                   	ret    
 80484d9:	90                   	nop    
 80484da:	90                   	nop    
 80484db:	90                   	nop    
Disassembly of section .fini:

080484dc <_fini>:
 80484dc:	55                   	push   %ebp
 80484dd:	89 e5                	mov    %esp,%ebp
 80484df:	53                   	push   %ebx
 80484e0:	83 ec 04             	sub    $0x4,%esp
 80484e3:	e8 00 00 00 00       	call   80484e8 <_fini+0xc>
 80484e8:	5b                   	pop    %ebx
 80484e9:	81 c3 18 11 00 00    	add    $0x1118,%ebx
 80484ef:	e8 7c fe ff ff       	call   8048370 <__do_global_dtors_aux>
 80484f4:	59                   	pop    %ecx
 80484f5:	5b                   	pop    %ebx
 80484f6:	c9                   	leave  
 80484f7:	c3                   	ret    
